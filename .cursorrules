# reader-server-rs

这是一个读书服务端软件，用户可以通过向服务器上传 txt 书籍，并在任意设备的网页上进行阅读，所有的设置与阅读进度将通过服务端同步。

## 技术栈

后端采用 Rust + axum + sqlx (with sqlite)，前端采用 Vue3 + Typescript + Native UI。

## 特色

- 服务端支持多用户，各用户之间可以通过“向我推荐”功能被推送一本设为 public 的书籍
- 前端支持 PC 与移动端页面
- 支持读书时长记录
- 支持缓存书籍内容

## 具体实现要求

1. 阅读进度和阅读时间通过网页定期（每秒）向服务端发送心跳包更新，这里需要携带用户设备标识的数据，而服务器会记录上一次心跳包的设备标识；如果该次心跳和上次设备不同，则服务器不会记录进度，相反，服务器会返回已经保存的正确进度，同步到该新设备。关于阅读时间记录，如果和上次心跳包的间隔过久，就认为这段时间是非阅读时间。
2. 书籍本体作为原格式的文件存储，而不是放在数据库内。数据库只存储阅读进度。（例如，可以用 cursor 位置代表阅读进度）
3. 每本书上传时会经过一次处理，分为不同章节，这些章节与其位置也会被存在数据库。分割可以使用 `(?<=[　\s])(?:序章|序言|卷首语|扉页|楔子|正文(?!完|结)|终章|后记|尾声|番外|第?\s{0,4}[\d〇零一二两三四五六七八九十百千万壹贰叁肆伍陆柒捌玖拾佰仟]+?\s{0,4}(?:章|节(?!课)|卷|集(?![合和])|部(?![分赛游])|篇(?!张))).{0,30}$`。
4. 首次进入主页，不应该直接跳转登录页面，而是先向用户展示登录后的主页，将软件特色展示后，再提醒用户登录。
5. 应该为管理员单独设置一个管理页面，并且首次进入时提示设置密码。管理员可以添加任意个邀请码，每个邀请码可以有一定次数限制。并且可以设置用户注册时是否必须使用邀请码。此外，管理员也可以在管理全局书籍。当然，管理员页面只需要一个，并且可以简陋一些。
6. 用户通过路由跳转入阅读页面。用户应该能设置背景色，字号，字间距，行距，缩进，阅读区域宽度，简繁切换，以及你想到的其他影响阅读体验的要素。设置保存在数据库内。
